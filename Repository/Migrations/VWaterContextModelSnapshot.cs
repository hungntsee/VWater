// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VWater.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(VWaterContext))]
    partial class VWaterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VWater.Data.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Access_token");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Account_Role", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<string>("ApartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ApartmentName");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("Area_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Apartment", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AreaName");

                    b.HasKey("Id");

                    b.ToTable("Area", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BrandName");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Logo");

                    b.Property<int>("ManufactureId")
                        .HasColumnType("int")
                        .HasColumnName("Manufacture_Id");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Origin");

                    b.HasKey("Id");

                    b.HasIndex("ManufactureId");

                    b.ToTable("Brand", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Apartment_Id");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BuildingName");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Building", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Note");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<int?>("BuildingId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Building_Id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryType_Id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Delivery_Address", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliverySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SlotName");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<TimeSpan>("TimeFrom")
                        .HasColumnType("time")
                        .HasColumnName("TimeFrom");

                    b.Property<TimeSpan>("TimeTo")
                        .HasColumnType("time")
                        .HasColumnName("TimeTo");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Delivery_Slot", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<int>("TypeLevel")
                        .HasColumnType("int")
                        .HasColumnName("TypeLevel");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeName");

                    b.HasKey("Id");

                    b.ToTable("Delivery_Type", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("Area_Id");

                    b.Property<string>("DistributorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DistributorName");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<string>("Payment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Payment");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Distributor", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("Brand_Id");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GoodsName");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Img");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Volume");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Goods", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int")
                        .HasColumnName("Goods_Id");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Img");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Volume");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.ToTable("Goods_Composition", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsExchangeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoodsId")
                        .HasColumnType("int")
                        .HasColumnName("Goods_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("date")
                        .HasColumnName("NoteDate");

                    b.Property<int?>("OrderId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrder_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("Warehouse_Id");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Goods_Exchange_Note", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInBaseline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoodsId")
                        .HasColumnType("int")
                        .HasColumnName("Goods_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("WarehouseBaselineId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseBaseline_Id");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("WarehouseBaselineId");

                    b.ToTable("Goods_In_Baseline", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoodId")
                        .HasColumnType("int")
                        .HasColumnName("Good_Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("ProductId");

                    b.ToTable("Goods_In_Product", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInQuotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoodsId")
                        .HasColumnType("int")
                        .HasColumnName("Goods_Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int")
                        .HasColumnName("Quotation_Id");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("QuotationId");

                    b.ToTable("Goods_In_Quotation", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ManufacturerName");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("Area_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Menu", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryAddress_Id");

                    b.Property<int>("DeliverySlotId")
                        .HasColumnType("int")
                        .HasColumnName("DeliverySlot_Id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OrderDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("TotalPrice");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("TotalQuantity");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DeliverySlotId");

                    b.HasIndex("StoreId");

                    b.ToTable("Order", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Detail", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Img");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductTypeName");

                    b.HasKey("Id");

                    b.HasIndex("ProductType_Id");

                    b.ToTable("Product", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.ProductType", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasColumnName("Id");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Url")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("Url");

                b.Property<string>("TypeName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(100)")
                    .HasColumnName("TypeName");

                b.HasKey("Id");

                b.ToTable("Product_Type", "dbo");
            });

            modelBuilder.Entity("VWater.Data.Entities.ProductInMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("Menu_Id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_In_Menu", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("Distributor_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("OrderDate");

                    b.Property<string>("Payment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Payment");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<decimal>("ToatalPrice")
                        .HasColumnType("money")
                        .HasColumnName("ToatalPrice");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("TotalQuantity");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("StoreId");

                    b.ToTable("Purchase_Order", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoodsId")
                        .HasColumnType("int")
                        .HasColumnName("Goods_Id");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrder_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Purchase_Order_Detail", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("Distributor_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("ValidFrom");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.ToTable("Quotation", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_Id");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Fullname");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StoreId");

                    b.ToTable("Shipper", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("Area_Id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StoreName");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Store", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Capacity");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("Store_Id");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("WarehouseName");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Warehouse", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.WarehouseBaseline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Note");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("TotalQuantity");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("Warehouse_Id");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Warehouse_Baseline", "dbo");
                });

            modelBuilder.Entity("VWater.Data.Entities.Account", b =>
                {
                    b.HasOne("VWater.Data.Entities.AccountRole", "RoleAccountRole")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_account_account_role");

                    b.Navigation("RoleAccountRole");
                });

            modelBuilder.Entity("VWater.Data.Entities.Apartment", b =>
                {
                    b.HasOne("VWater.Data.Entities.Area", "Area")
                        .WithMany("Apartments")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_apartment_area");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("VWater.Data.Entities.Brand", b =>
                {
                    b.HasOne("VWater.Data.Entities.Manufacturer", "ManufactureManufacturer")
                        .WithMany("ManufactureBrands")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_brand_manufacture");

                    b.Navigation("ManufactureManufacturer");
                });

            modelBuilder.Entity("VWater.Data.Entities.Building", b =>
                {
                    b.HasOne("VWater.Data.Entities.Apartment", "Apartment")
                        .WithMany("Buildings")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_building_apartment");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliveryAddress", b =>
                {
                    b.HasOne("VWater.Data.Entities.Building", "Building")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_delivery_address_building");

                    b.HasOne("VWater.Data.Entities.Customer", "Customer")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Delivery_Address_Customer");

                    b.HasOne("VWater.Data.Entities.DeliveryType", "DeliveryType")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Delivery_Address_Delivery_Type");

                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_delivery_address_store");

                    b.Navigation("Building");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliverySlot", b =>
                {
                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("DeliverySlots")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_delivery_slot_store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.Distributor", b =>
                {
                    b.HasOne("VWater.Data.Entities.Area", "Area")
                        .WithMany("Distributors")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_distributor_area");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("VWater.Data.Entities.Goods", b =>
                {
                    b.HasOne("VWater.Data.Entities.Brand", "Brand")
                        .WithMany("Goods")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_brand1");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsComposition", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "Goods")
                        .WithMany("GoodsCompositions")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_composition_goods");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsExchangeNote", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "Goods")
                        .WithMany("GoodsExchangeNotes")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_exchange_note_goods");

                    b.HasOne("VWater.Data.Entities.Order", "Order")
                        .WithMany("GoodsExchangeNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_exchange_note_order");

                    b.HasOne("VWater.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("GoodsExchangeNotes")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_exchange_note_purchase_order");

                    b.HasOne("VWater.Data.Entities.Warehouse", "Warehouse")
                        .WithMany("GoodsExchangeNotes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_exchange_note_warehouse");

                    b.Navigation("Goods");

                    b.Navigation("Order");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInBaseline", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "Goods")
                        .WithMany("GoodsInBaselines")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_in_baseline_goods");

                    b.HasOne("VWater.Data.Entities.WarehouseBaseline", "WarehouseBaseline")
                        .WithMany("GoodsInBaselines")
                        .HasForeignKey("WarehouseBaselineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_in_baseline_warehouse_baseline");

                    b.Navigation("Goods");

                    b.Navigation("WarehouseBaseline");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInProduct", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "GoodGoods")
                        .WithMany("GoodGoodsInProducts")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_good_in_product_goods");

                    b.HasOne("VWater.Data.Entities.Product", "Product")
                        .WithMany("GoodsInProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_good_in_product_product");

                    b.Navigation("GoodGoods");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VWater.Data.Entities.GoodsInQuotation", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "Goods")
                        .WithMany("GoodsInQuotations")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_in_quotation_goods");

                    b.HasOne("VWater.Data.Entities.Quotation", "Quotation")
                        .WithMany("GoodsInQuotations")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_goods_in_quotation_quotation");

                    b.Navigation("Goods");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("VWater.Data.Entities.Menu", b =>
                {
                    b.HasOne("VWater.Data.Entities.Area", "Area")
                        .WithMany("Menus")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_menu_area");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("VWater.Data.Entities.Order", b =>
                {
                    b.HasOne("VWater.Data.Entities.DeliveryAddress", "DeliveryAddress")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_delivery_address");

                    b.HasOne("VWater.Data.Entities.DeliverySlot", "DeliverySlot")
                        .WithMany("Orders")
                        .HasForeignKey("DeliverySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_delivery_slot");

                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_store");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("DeliverySlot");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("VWater.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_detail_order");

                    b.HasOne("VWater.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_detail_product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VWater.Data.Entities.ProductInMenu", b =>
                {
                    b.HasOne("VWater.Data.Entities.Menu", "Menu")
                        .WithMany("ProductInMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_in_menu_product_menu");

                    b.HasOne("VWater.Data.Entities.Product", "Product")
                        .WithMany("ProductInMenus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_in_menu_product");

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VWater.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("VWater.Data.Entities.Distributor", "Distributor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_distributor");

                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_store");

                    b.Navigation("Distributor");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("VWater.Data.Entities.Goods", "Goods")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_detail_goods");

                    b.HasOne("VWater.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_detail_purchase_order");

                    b.Navigation("Goods");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("VWater.Data.Entities.Quotation", b =>
                {
                    b.HasOne("VWater.Data.Entities.Distributor", "Distributor")
                        .WithMany("Quotations")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_quotation_distributor");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("VWater.Data.Entities.Shipper", b =>
                {
                    b.HasOne("VWater.Data.Entities.Account", "Account")
                        .WithMany("Shippers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_shipper_account");

                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("Shippers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_shipper_store");

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.Store", b =>
                {
                    b.HasOne("VWater.Data.Entities.Area", "Area")
                        .WithMany("Stores")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_store_area");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("VWater.Data.Entities.Warehouse", b =>
                {
                    b.HasOne("VWater.Data.Entities.Area", "Area")
                        .WithMany("Warehouses")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_warehouse_area");

                    b.HasOne("VWater.Data.Entities.Store", "Store")
                        .WithMany("Warehouses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_warehouse_store");

                    b.Navigation("Area");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VWater.Data.Entities.WarehouseBaseline", b =>
                {
                    b.HasOne("VWater.Data.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseBaselines")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_warehouse_baseline_warehouse");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("VWater.Data.Entities.Account", b =>
                {
                    b.Navigation("Shippers");
                });

            modelBuilder.Entity("VWater.Data.Entities.AccountRole", b =>
                {
                    b.Navigation("RoleAccounts");
                });

            modelBuilder.Entity("VWater.Data.Entities.Apartment", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("VWater.Data.Entities.Area", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Distributors");

                    b.Navigation("Menus");

                    b.Navigation("Stores");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("VWater.Data.Entities.Brand", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("VWater.Data.Entities.Building", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("VWater.Data.Entities.Customer", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliveryAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliverySlot", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VWater.Data.Entities.DeliveryType", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("VWater.Data.Entities.Distributor", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("VWater.Data.Entities.Goods", b =>
                {
                    b.Navigation("GoodGoodsInProducts");

                    b.Navigation("GoodsCompositions");

                    b.Navigation("GoodsExchangeNotes");

                    b.Navigation("GoodsInBaselines");

                    b.Navigation("GoodsInQuotations");

                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("VWater.Data.Entities.Manufacturer", b =>
                {
                    b.Navigation("ManufactureBrands");
                });

            modelBuilder.Entity("VWater.Data.Entities.Menu", b =>
                {
                    b.Navigation("ProductInMenus");
                });

            modelBuilder.Entity("VWater.Data.Entities.Order", b =>
                {
                    b.Navigation("GoodsExchangeNotes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("VWater.Data.Entities.Product", b =>
                {
                    b.Navigation("GoodsInProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductInMenus");
                });

            modelBuilder.Entity("VWater.Data.Entities.ProductType", b =>
            {
                b.Navigation("ProductTypes");
            });

            modelBuilder.Entity("VWater.Data.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("GoodsExchangeNotes");

                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("VWater.Data.Entities.Quotation", b =>
                {
                    b.Navigation("GoodsInQuotations");
                });

            modelBuilder.Entity("VWater.Data.Entities.Store", b =>
                {
                    b.Navigation("DeliveryAddresses");

                    b.Navigation("DeliverySlots");

                    b.Navigation("Orders");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("Shippers");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("VWater.Data.Entities.Warehouse", b =>
                {
                    b.Navigation("GoodsExchangeNotes");

                    b.Navigation("WarehouseBaselines");
                });

            modelBuilder.Entity("VWater.Data.Entities.WarehouseBaseline", b =>
                {
                    b.Navigation("GoodsInBaselines");
                });
#pragma warning restore 612, 618
        }
    }
}
